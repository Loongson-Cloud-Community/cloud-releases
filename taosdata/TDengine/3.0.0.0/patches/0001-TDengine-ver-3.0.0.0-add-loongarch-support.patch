From 2cf7645431038704e5ac1dc8f2bd07fb379d6676 Mon Sep 17 00:00:00 2001
From: Jingyun Hua <huajingyun@loongson.cn>
Date: Mon, 8 May 2023 08:59:48 +0800
Subject: [PATCH] TDengine ver-3.0.0.0 add loongarch support

---
 cmake/cmake.platform             | 12 ++++++++++++
 packaging/docker/dockerbuild.sh  |  4 ++--
 packaging/docker/dockerbuildi.sh |  4 ++--
 packaging/release.sh             | 12 ++++++------
 source/os/src/osSysinfo.c        |  6 +++++-
 source/util/src/tcrc32c.c        | 10 +++++-----
 6 files changed, 32 insertions(+), 16 deletions(-)

diff --git a/cmake/cmake.platform b/cmake/cmake.platform
index 887fbd86d5..b2d6325a5a 100644
--- a/cmake/cmake.platform
+++ b/cmake/cmake.platform
@@ -93,6 +93,12 @@ IF ("${CPUTYPE}" STREQUAL "")
     SET(TD_ARM_64 TRUE)
     ADD_DEFINITIONS("-D_TD_ARM_")
     ADD_DEFINITIONS("-D_TD_ARM_64")
+  ELSEIF (CMAKE_SYSTEM_PROCESSOR MATCHES "loongarch64")
+    MESSAGE(STATUS "The current platform is loongarch64")
+    SET(PLATFORM_ARCH_STR "loongarch64")
+    SET(TD_LOONGARCH_64 TRUE)
+    ADD_DEFINITIONS("-D_TD_LOONGARCH_")
+    ADD_DEFINITIONS("-D_TD_LOONGARCH_64")
   ENDIF ()
 ELSE ()
   # if generate ARM version:
@@ -109,6 +115,12 @@ ELSE ()
     ADD_DEFINITIONS("-D_TD_ARM_")
     ADD_DEFINITIONS("-D_TD_ARM_64")
     SET(TD_ARM_64 TRUE)
+  ELSEIF (${CPUTYPE} MATCHES "loongarch64")
+    SET(PLATFORM_ARCH_STR "loongarch64")
+    MESSAGE(STATUS "input cpuType: loongarch64")
+    SET(TD_LOONGARCH_64 TRUE)
+    ADD_DEFINITIONS("-D_TD_LOONGARCH_")
+    ADD_DEFINITIONS("-D_TD_LOONGARCH_64")
   ELSEIF (${CPUTYPE} MATCHES "mips64")
     SET(PLATFORM_ARCH_STR "mips")
     MESSAGE(STATUS "input cpuType: mips64")
diff --git a/packaging/docker/dockerbuild.sh b/packaging/docker/dockerbuild.sh
index 541ae6ec13..6b283503ad 100755
--- a/packaging/docker/dockerbuild.sh
+++ b/packaging/docker/dockerbuild.sh
@@ -5,7 +5,7 @@ set -e
 #set -x
 
 # dockerbuild.sh 
-#             -c [aarch32 | aarch64 | amd64 | x86 | mips64 ...]  
+#             -c [aarch32 | aarch64 | amd64 | x86 | mips64 | loongarch64...]
 #             -n [version number]
 #             -p [password for docker hub]
 #             -V [stable | beta]
@@ -52,7 +52,7 @@ do
       dockerLatest=$(echo $OPTARG)
       ;;
     h)
-      echo "Usage: `basename $0`  -c [aarch32 | aarch64 | amd64 | x86 | mips64 ...] "
+      echo "Usage: `basename $0`  -c [aarch32 | aarch64 | amd64 | x86 | mips64 | loongarch64...] "
       echo "                      -n [version number] "
       echo "                      -p [password for docker hub] "
       echo "                      -V [stable | beta] "
diff --git a/packaging/docker/dockerbuildi.sh b/packaging/docker/dockerbuildi.sh
index a0a954e30f..9b7497dc4a 100755
--- a/packaging/docker/dockerbuildi.sh
+++ b/packaging/docker/dockerbuildi.sh
@@ -5,7 +5,7 @@ set -e
 #set -x
 
 # dockerbuild.sh 
-#             -c [aarch32 | aarch64 | amd64 | x86 | mips64 ...]  
+#             -c [aarch32 | aarch64 | amd64 | x86 | mips64 | loongarch64...]
 #             -n [version number]
 #             -p [password for docker hub]
 
@@ -30,7 +30,7 @@ do
       passWord=$(echo $OPTARG)
       ;;
     h)
-      echo "Usage: `basename $0` -c [aarch32 | aarch64 | amd64 | x86 | mips64 ...] "
+      echo "Usage: `basename $0` -c [aarch32 | aarch64 | amd64 | x86 | mips64 | loongarch64...] "
       echo "                      -n [version number] "
       echo "                      -p [password for docker hub] "
       exit 0
diff --git a/packaging/release.sh b/packaging/release.sh
index 2452ee1813..8410e5d5a0 100755
--- a/packaging/release.sh
+++ b/packaging/release.sh
@@ -6,7 +6,7 @@ set -e
 #set -x
 
 # release.sh  -v [cluster | edge]
-#             -c [aarch32 | aarch64 | x64 | x86 | mips64 ...]
+#             -c [aarch32 | aarch64 | x64 | x86 | mips64 | loongarch64...]
 #             -o [Linux | Kylin | Alpine | Raspberrypi | Darwin | Windows | Ningsi60 | Ningsi80 |...]
 #             -V [stable | beta]
 #             -l [full | lite]
@@ -19,13 +19,13 @@ set -e
 # set parameters by default value
 verMode=edge    # [cluster, edge]
 verType=stable  # [stable, beta]
-cpuType=x64     # [aarch32 | aarch64 | x64 | x86 | mips64 ...]
+cpuType=loongarch64     # [aarch32 | aarch64 | x64 | x86 | mips64 loongarch64...]
 osType=Linux    # [Linux | Kylin | Alpine | Raspberrypi | Darwin | Windows | Ningsi60 | Ningsi80 |...]
 pagMode=full    # [full | lite]
 soMode=dynamic  # [static | dynamic]
 dbName=taos     # [taos | ...]
 allocator=glibc # [glibc | jemalloc]
-verNumber=""
+verNumber="3.0.0.0"
 verNumberComp="3.0.0.0"
 httpdBuild=false
 
@@ -77,7 +77,7 @@ while getopts "hv:V:c:o:l:s:d:a:n:m:H:" arg; do
     ;;
   h)
     echo "Usage: $(basename $0) -v [cluster | edge] "
-    echo "                  -c [aarch32 | aarch64 | x64 | x86 | mips64 ...] "
+    echo "                  -c [aarch32 | aarch64 | x64 | x86 | mips64 | loongarch64 ...] "
     echo "                  -o [Linux | Kylin | Alpine | Raspberrypi | Darwin | Windows | Ningsi60 | Ningsi80 |...] "
     echo "                  -V [stable | beta] "
     echo "                  -l [full | lite] "
@@ -216,7 +216,7 @@ else
 fi
 
 # check support cpu type
-if [[ "$cpuType" == "x64" ]] || [[ "$cpuType" == "aarch64" ]] || [[ "$cpuType" == "aarch32" ]] || [[ "$cpuType" == "arm64" ]] || [[ "$cpuType" == "arm32" ]] || [[ "$cpuType" == "mips64" ]]; then
+if [[ "$cpuType" == "x64" ]] || [[ "$cpuType" == "aarch64" ]] || [[ "$cpuType" == "aarch32" ]] || [[ "$cpuType" == "arm64" ]] || [[ "$cpuType" == "arm32" ]] || [[ "$cpuType" == "mips64" ]] || [[ "$cpuType" == "loongarch64" ]]; then
   if [ "$verMode" != "cluster" ]; then
     # community-version compile
     cmake ../ -DCPUTYPE=${cpuType} -DOSTYPE=${osType} -DSOMODE=${soMode} -DDBNAME=${dbName} -DVERTYPE=${verType} -DVERDATE="${build_time}" -DGITINFO=${gitinfo} -DGITINFOI=${gitinfoOfInternal} -DVERNUMBER=${verNumber} -DVERCOMPATIBLE=${verNumberComp} -DPAGMODE=${pagMode} -DBUILD_HTTP=${BUILD_HTTP} -DBUILD_TOOLS=${BUILD_TOOLS} ${allocator_macro}
@@ -244,7 +244,7 @@ cd ${curr_dir}
 
 # 3. Call the corresponding script for packaging
 if [ "$osType" != "Darwin" ]; then
-  if [[ "$verMode" != "cluster" ]] && [[ "$pagMode" == "full" ]] && [[ "$cpuType" == "x64" ]] && [[ "$dbName" == "taos" ]]; then
+  if [[ "$verMode" != "cluster" ]] && [[ "$pagMode" == "full" ]] && [[ "$cpuType" == "loongarch64" ]] && [[ "$dbName" == "taos" ]]; then
     ret='0'
     command -v dpkg >/dev/null 2>&1 || { ret='1'; }
     if [ "$ret" -eq 0 ]; then
diff --git a/source/os/src/osSysinfo.c b/source/os/src/osSysinfo.c
index 3a75e18a7f..bc91e41b60 100644
--- a/source/os/src/osSysinfo.c
+++ b/source/os/src/osSysinfo.c
@@ -906,9 +906,11 @@ void taosSetCoreDump(bool enable) {
 
   old_len = sizeof(old_usespid);
 
+#ifndef __loongarch64
   if (syscall(SYS__sysctl, &args) == -1) {
     // printf("_sysctl(kern_core_uses_pid) set fail: %s", strerror(errno));
   }
+#endif
 
   // printf("The old core_uses_pid[%" PRIu64 "]: %d", old_len, old_usespid);
 
@@ -922,9 +924,11 @@ void taosSetCoreDump(bool enable) {
 
   old_len = sizeof(old_usespid);
 
+#ifndef __loongarch64
   if (syscall(SYS__sysctl, &args) == -1) {
     // printf("_sysctl(kern_core_uses_pid) get fail: %s", strerror(errno));
   }
+#endif
 
   // printf("The new core_uses_pid[%" PRIu64 "]: %d", old_len, old_usespid);
 #endif
@@ -990,4 +994,4 @@ bool taosCheckCurrentInDll() {
 #else
   return false;
 #endif
-}
\ No newline at end of file
+}
diff --git a/source/util/src/tcrc32c.c b/source/util/src/tcrc32c.c
index 66e9240cd5..82041d0771 100644
--- a/source/util/src/tcrc32c.c
+++ b/source/util/src/tcrc32c.c
@@ -19,7 +19,7 @@
 	*/
 
 #define _DEFAULT_SOURCE
-#if !defined(_TD_ARM_) && !defined(_TD_MIPS_)
+#if !defined(_TD_ARM_) && !defined(_TD_MIPS_) && !defined(_TD_LOONGARCH_)
 #include <nmmintrin.h>
 #endif
 
@@ -736,7 +736,7 @@ static uint32_t table[16][256] = {
      0x9c221d09, 0x6e2e10f7, 0x7dd67004, 0x8fda7dfa}
 
 };
-#if !defined(_TD_ARM_) && !defined(_TD_MIPS_)
+#if !defined(_TD_ARM_) && !defined(_TD_MIPS_) && !defined(_TD_LOONGARCH_)
 static uint32_t long_shifts[4][256] = {
     {0x00000000, 0xe040e0ac, 0xc56db7a9, 0x252d5705, 0x8f3719a3, 0x6f77f90f,
      0x4a5aae0a, 0xaa1a4ea6, 0x1b8245b7, 0xfbc2a51b, 0xdeeff21e, 0x3eaf12b2,
@@ -1187,7 +1187,7 @@ uint32_t crc32c_sf(uint32_t crci, crc_stream input, size_t length) {
   }
   return (uint32_t)crc ^ 0xffffffff;
 }
-#if !defined(_TD_ARM_) && !defined(_TD_MIPS_)
+#if !defined(_TD_ARM_) && !defined(_TD_MIPS_) && !defined(_TD_LOONGARCH_)
 /* Apply the zeros operator table to crc. */
 static uint32_t shift_crc(uint32_t shift_table[][256], uint32_t crc) {
   return shift_table[0][crc & 0xff] ^ shift_table[1][(crc >> 8) & 0xff] ^
@@ -1198,7 +1198,7 @@ static uint32_t shift_crc(uint32_t shift_table[][256], uint32_t crc) {
    version.  Otherwise, use the software version. */
 uint32_t (*crc32c)(uint32_t crci, crc_stream bytes, size_t len) = crc32c_sf;
 
-#if !defined(_TD_ARM_) && !defined(_TD_MIPS_)
+#if !defined(_TD_ARM_) && !defined(_TD_MIPS_) && !defined(_TD_LOONGARCH_)
 /* Compute CRC-32C using the Intel hardware instruction. */
 uint32_t crc32c_hw(uint32_t crc, crc_stream buf, size_t len) {
   crc_stream next = buf;
@@ -1353,7 +1353,7 @@ uint32_t crc32c_hw(uint32_t crc, crc_stream buf, size_t len) {
 #endif // #ifndef _TD_ARM_
 
 void taosResolveCRC() {
-#if defined _TD_ARM_ || defined _TD_MIPS_ || defined WINDOWS
+#if defined _TD_ARM_ || defined _TD_MIPS_ || defined WINDOWS || defined _TD_LOONGARCH_
   crc32c = crc32c_sf;
 #else
   int32_t sse42;
-- 
2.27.0

